{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","lat","long","country","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","status","nul","remove","_id","review","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport {Router} from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport  { authenticate } from '../middleware/authMiddleware';\n\nexport default({config, db}) => {\n  let api = Router();\n\n  // CRUD: Create, Read, Update, Delete\n\n  // '/v1/foodtruck/add' - Create\n\n  api.post('/add', (req, res) => {\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodtype = req.body.foodtype;\n    newFoodTruck.avgcost = req.body.avgcost;\n    newFoodTruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n    newFoodTruck.country = req.body.country;\n\n    newFoodTruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n\n      res.json({message: 'FoodTruck save successfully'});\n    });\n  });\n\n  // '/v1/foodtruck' - Read\n  api.get('/', (req, res) => {\n    FoodTruck.find({}, (err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Read by id\n  api.get('/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtruck);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Updated PUT\n  api.put('/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.name = req.body.name;\n      foodtruck.foodtype = req.body.foodtype;\n      foodtruck.avgcost = req.body.avgcost;\n      foodtruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      foodtruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      foodtruck.country = req.body.country;\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({message: \"FoodTruck info Updated\"});\n      });\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Delete\napi.delete('/:id', (req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if(err){\n      res.status(500).send(err);\n      return;\n    }\n    if(foodtruck == nul){\n      res.status(404).send(\"FoodTruck not found\");\n      return;\n    }\n    FoodTruck.remove({\n      _id: req.params.id\n    }, (err, foodtruck) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      Review.remove({\n        _id: req.params.id\n      }, (err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({message: \"Foodtruck and Reviews succesfully removed\"});\n      });\n    });\n  });\n});\n\n\n  //add review for specific foodtruck id\n  // '/v1/foodtruck/reviews/add/:id'\n\n  api.post('/reviews/add/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      let newReview = new Review();\n\n      newReview.title = req.body.title;\n      newReview.text = req.body.text;\n      newReview.foodtruck = foodtruck._id;\n      newReview.save((err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        foodtruck.reviews.push(newReview);\n        foodtruck.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({message: 'Foodtruck review saved'});\n        });\n      });\n    });\n  });\n\n  //get reviews for specific foodtruck id\n  // '/v1/foodtruck/reviews/:id'\n  api.get('/reviews/:id', (req, res) => {\n    Review.find({\n      foodtruck: req.params.id\n    }, (err, reviews) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(reviews);\n    });\n  });\n\n  // get foodtruck by foodtype\n  // ‘/v1/foodtruck/foodtype/:foodtype’\n\n  api.get('/foodtype/:foodtype', (req, res) => {\n    FoodTruck.find({\n      foodtype: req.params.foodtype\n    }, (err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n\n\n  return api;\n\n}\n"]}